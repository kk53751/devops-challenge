name: 'Terraform'

on:
  push:
    branches: [ "main" ]
  pull_request:
  workflow_dispatch: # Allows manual triggering of the workflow

permissions:
  contents: read

jobs:
  terraform:
    name: 'Setup VM'
    runs-on: ubuntu-24.04
    environment: production

    # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
    defaults:
      run:
        shell: bash

    steps:
    # Checkout the repository to the GitHub Actions runner
    - name: Checkout
      uses: actions/checkout@v4.2.2

    # - name: Install Ansible
    #   run: |
    #     sudo apt-get update
    #     sudo apt-get install -y software-properties-common
    #     sudo add-apt-repository --yes --update ppa:ansible/ansible
    #     sudo apt-get install -y ansible

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: eu-west-2

    # Install the latest version of Terraform CLI and configure the Terraform CLI configuration file with a Terraform Cloud user API token
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v1
      with:
        terraform_version: "1.9.0"
    
    # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
    - name: Terraform Init
      run: terraform init

    # # Checks that all Terraform configuration files adhere to a canonical format
    - name: Format Terraform
      run: terraform fmt -recursive
    - name: Terraform Format
      run: terraform fmt -check

    # Generates an execution plan for Terrafo rm
    - name: Terraform Plan
      run: terraform plan -out=plan.tfplan -input=false

      # On push to "main", build or change infrastructure according to Terraform configuration files
      # Note: It is recommended to set up a required "strict" status check in your repository for "Terraform Cloud". See the documentation on "strict" required status checks for more information: https://help.github.com/en/github/administering-a-repository/types-of-required-status-checks
    - name: Terraform Apply
      #if: github.ref == 'refs/heads/"main"' && github.event_name == 'push'
      run: terraform apply plan.tfplan

    
    - name: Upload Files as Artifact
      uses: actions/upload-artifact@v3
      with:
        name: checkout-files
        path: .
        retention-days: 1

  Ansible:
    name: 'Configure VM'
    runs-on: ubuntu-24.04
    environment: production
    needs: terraform

    # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
    defaults:
      run:
        shell: bash

    steps:
    - name: Download Artifact
      uses: actions/download-artifact@v3
      with:
        name: checkout-files

    - name: Install Ansible
      run: |
        sudo apt-get update
        sudo apt-get install -y software-properties-common
        sudo add-apt-repository --yes --update ppa:ansible/ansible
        sudo apt-get install -y ansible

    - name: Check files
      run: |
        ls -la
    
    - name: Configure VM
      run: ansible-playbook  -v -u ubuntu  setup_vm.yml -i inventory.txt --private-key private.pem
      env:
        ANSIBLE_HOST_KEY_CHECKING = "False"